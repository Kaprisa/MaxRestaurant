const express = require('express')
const router = express.Router()
const { catchErrors } = require('../handlers/errorHandlers')
const homeController = require('../controllers/homeController')
const apiController = require('../controllers/apiController')
const userController = require('../controllers/userController')
const authController = require('../controllers/authController')
const adminController = require('../controllers/adminController')
const blogController = require('../controllers/blogController')
const eventsController = require('../controllers/eventsController')
const menuController = require('../controllers/menuController')
const shopController = require('../controllers/shopController')
const reviewController = require('../controllers/reviewController')
const orderController = require('../controllers/orderController')
const bookingController = require('../controllers/bookingController')

router.delete('/review/:id', catchErrors(reviewController.removeReview))
router.get('/', homeController.getHome)
router.get('/about', homeController.getAbout)
router.get('/contacts', homeController.getContacts)
router.get('/gallery', homeController.getGallery)
router.get('/reservation', homeController.getReservation)
router.get('/checkout', catchErrors(userController.getCheckout))
router.get('/cart', catchErrors(userController.getCart))
router.get('/articles/:id', catchErrors(blogController.getArticle))
router.get([ '/blog', '/blog/pages/:page', '/blog/pages/:page/:category', '/blog/pages/:page/tag/:tag' ], catchErrors(blogController.getBlog))
router.get('/menu', catchErrors(menuController.getMenu))
router.get([ '/shop', '/shop/pages/:page', '/shop/pages/:page/:type', '/shop/pages/:page/:type/:category' ], catchErrors(shopController.getShop))
router.get('/product/:id', catchErrors(shopController.getProduct))

router.get('/admin/shop/:id', userController.isAdmin, catchErrors(adminController.getEditProduct))
router.get('/admin/blog/:id', userController.isAdmin, catchErrors(adminController.getEditArticle))
router.get('/admin/events/:id', userController.isAdmin, catchErrors(adminController.getEditEvent))
router.get('/admin/menu/:id', userController.isAdmin, catchErrors(adminController.getEditDish))
router.get([ '/admin', '/admin/lists', '/admin/lists/:list' ], userController.isAdmin, adminController.getLists)
router.get('/admin/menu', userController.isAdmin, catchErrors(adminController.getMenu))
router.get('/admin/:page', userController.isAdmin, adminController.getTabs)

router.post('/api/fileUpload', apiController.upload, catchErrors(apiController.resize), apiController.fileUpload)

router.post([ '/article/:id/edit', '/article/add' ], catchErrors(blogController.updateArticle))
router.post('/event/edit', catchErrors(eventsController.editEvent))
router.post([ '/menu/:id/edit', '/menu/add' ], catchErrors(menuController.addDish))
router.post('/menu/categories/add', catchErrors(menuController.addCategory))
router.post([ '/product/add', '/product/:id/edit' ], catchErrors(shopController.editProduct))
router.post('/product/:id/variety/add', catchErrors(shopController.addProductVariety))
router.delete('/shop/model/:id', catchErrors(shopController.removeModel))
router.delete('/:l/:id', catchErrors(adminController.remove), apiController.removePhoto)

router.post('/product/:id/review', authController.isLoggedIn, catchErrors(reviewController.addReview))
router.post('/product/:id/like', authController.isLoggedIn, catchErrors(apiController.likeProduct))
router.get('/api/search', catchErrors(apiController.searchProducts))
router.get('/api/search/article', catchErrors(apiController.searchArticles))
router.post('/api/money/add', catchErrors(apiController.addMoney))
router.post('/api/product/:id/addToCart', authController.isLoggedIn, catchErrors(apiController.addToCart))
router.delete('/api/product/:id/delete', catchErrors(apiController.removeFromCart))
router.post('/api/cart/update', catchErrors(apiController.updateCart))

router.post('/checkout', catchErrors(orderController.order))
router.post('/book', catchErrors(bookingController.book))

router.get('/account/orders', authController.isLoggedIn, catchErrors(orderController.getOrders))
router.get('/account/purse', authController.isLoggedIn, catchErrors(userController.getPurse))
router.get('/account/bonus', authController.isLoggedIn, catchErrors(userController.getBonus))
router.get('/account', (req, res) => res.redirect('/account/profile'))
router.get('/account/:page', authController.isLoggedIn, userController.getAccount)
router.post('/profile/update', catchErrors(userController.updateProfile))
router.post('/auth/password/change', authController.confirmedPassword, catchErrors(authController.changePassword))

router.post('/register', userController.validateRegister, userController.register, authController.afterLogin)
router.post('/login', authController.login, authController.afterLogin)
router.get('/logout', authController.isLoggedIn, authController.logout)
router.post('/user/passport/change', catchErrors(userController.updatePassportData))
router.post('/auth/password/change', authController.confirmedPassword, catchErrors(authController.changePassword))
router.post('/account/forgot', catchErrors(authController.forgot))
router.get('/account/reset/:token', catchErrors(authController.reset))
router.post('/account/reset/:token', authController.confirmedPassword, catchErrors(authController.update))

module.exports = router
//TODO Сделать отдельный роутер для admin, чтобы он использовал проверку 1 раз use